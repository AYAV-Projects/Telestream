/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira Basic LevelMute Control v3.0
System Number:
Programmer: DGG
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Basic LevelMute Control v3.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_,_SKIP_,_SKIP_,_SKIP_; 
DIGITAL_OUTPUT _SKIP_, _SKIP_,_SKIP_,_SKIP_,_SKIP_;

DIGITAL_INPUT Poll, _SKIP_; 
DIGITAL_INPUT Level_Up, Level_Down, _SKIP_;                                                
DIGITAL_INPUT Mute_On, Mute_Off, Mute_Toggle, _SKIP_;
DIGITAL_INPUT Enable, _SKIP_;
DIGITAL_INPUT Send_New_Level_Percent;
ANALOG_INPUT New_Level_Percent;

DIGITAL_OUTPUT Is_Initialized, _SKIP_; 
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_; 
DIGITAL_OUTPUT Mute_Is_On, Mute_Is_Off, _SKIP_, _SKIP_; 
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_; 
ANALOG_OUTPUT Volume_Level_Percent, _SKIP_;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER Instance_Tag[50];
INTEGER_PARAMETER Index_1, Index_2;
INTEGER_PARAMETER Level_Step;
INTEGER_PARAMETER Command_Processor_ID;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Instance_Tag
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Index_1, Index_2
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 256d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Level_Step
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 6d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

LevelComponent level;
StateComponent mute;

INTEGER muteInit;
INTEGER levelInit;

INTEGER IsReady;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializeChange(Component sender, UInt16EventArgs args)
{
	IF (sender = level)
		levelInit = args.Payload;

	ELSE IF (sender = mute)
		muteInit = args.Payload;

	Is_Initialized = levelInit && muteInit;
}

EVENTHANDLER OnLevelChangePercent(LevelComponent sender, UInt16EventArgs args)
{
	Volume_Level_Percent = args.Payload;
}

EVENTHANDLER OnStateChange(StateComponent sender, UInt16EventArgs args)
{
	Mute_Is_On = (args.Payload = TRUE);
	Mute_Is_Off = (args.Payload = FALSE);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
THREADSAFE PUSH Level_Up
{
	level.Raise();
}
        
THREADSAFE PUSH Level_Down
{
	level.Lower();
}

THREADSAFE RELEASE Level_Up, Level_Down
{
	level.Stop();
}           
   
            
THREADSAFE PUSH Mute_On
{
	mute.SetState(1);
}

THREADSAFE PUSH Mute_Off
{
	mute.SetState(0);
}

THREADSAFE PUSH Mute_Toggle
{
	mute.ToggleState();
}

THREADSAFE CHANGE New_Level_Percent
{
	IF (Send_New_Level_Percent)
	{
		level.SetPercent(New_Level_Percent);
		DELAY(30);
	}
}

THREADSAFE RELEASE Send_New_Level_Percent
{
	IF (New_Level_Percent != Volume_Level_Percent)
		level.SetPercent(New_Level_Percent);
}

THREADSAFE PUSH Poll
{
	level.PollState();
	mute.PollState();
}

THREADSAFE PUSH Enable
{
	IF (IsReady)
	{
		level.Configure(Command_Processor_ID, Instance_Tag, "level", Index_1, Index_2, Level_Step);
		mute.Configure(Command_Processor_ID, Instance_Tag, "mute", Index_1, Index_2);
	}
}
THREADSAFE RELEASE Enable
{
	IF (IsReady)
	{
		level.UnRegister();
		mute.UnRegister();
	}
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	IsReady = FALSE;

	muteInit = FALSE;
	levelInit = FALSE;

    WaitForInitializationComplete();
	REGISTEREVENT(level, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(level, OnLevelChangePercent, OnLevelChangePercent);
	REGISTEREVENT(mute, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(mute, OnStateChange, OnStateChange); 
                              
	IF (Enable)         
	{
	    level.Configure(Command_Processor_ID, Instance_Tag, "level", Index_1, Index_2, Level_Step);
	    mute.Configure(Command_Processor_ID, Instance_Tag, "mute", Index_1, Index_2);
	}

	IsReady = TRUE;
}

