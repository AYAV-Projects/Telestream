/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira Comm v3.0
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
// #DEFINE_CONSTANT
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Command Processor IP v3.0 or the Biamp Tesira Command Processor RS232 v3.0.umc modules only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, Connect, Disconnect, Initialize, Debug;
// ANALOG_INPUT 
STRING_INPUT IPAddress[100];
BUFFER_INPUT From_Device$[10000]; 

DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, Is_Initialized, Is_Communicating;
// ANALOG_OUTPUT 
STRING_OUTPUT To_Device$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Control_Type;
INTEGER_PARAMETER Command_Processor_ID;
STRING_PARAMETER IP_Address[100];
STRING_PARAMETER Username[100];
STRING_PARAMETER Password[100];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Control_Type
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 2d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IP_Address
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "0.0.0.0";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Username
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "default";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Password
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\r";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
BiampTesira tesira;

String myIPAddress[100];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnSendDebug(BiampTesira sender, StringEventArgs args)
{
	IF (Debug)
		trace("%s", args.Payload);
}

EVENTHANDLER OnInitializeChange(BiampTesira sender, UInt16EventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnCommunicatingChange(BiampTesira sender, UInt16EventArgs args)
{
	Is_Communicating = args.Payload;
}

EVENTHANDLER OnRS232Transmit(BiampTesira sender, StringEventArgs args)
{
	MAKESTRING(To_Device$, "%s", args.Payload);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Initialize
{
	tesira.Initialize(TRUE);
}
RELEASE Initialize
{
	tesira.Initialize(FALSE);
}

Push Connect
{
	tesira.Connect();
}

Push Disconnect
{
	tesira.Disconnect();
}

THREADSAFE Change From_Device$
{
	STRING msg[10000];

	WHILE(TRUE)
    {
        try
        {
			msg = GatherByLength(1, From_Device$);
			tesira.RS232Response(msg);
        }
        catch
        {
            trace("Issue with Device Rx message handeling\n");
        }
    }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();
    
	REGISTEREVENT(tesira, OnSendDebug, OnSendDebug); 
	REGISTEREVENT(tesira, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(tesira, OnCommunicatingChange, OnCommunicatingChange);
	REGISTEREVENT(tesira, OnRS232Transmit, OnRS232Transmit); 
                   
	// DO NOT REMOVE! Need to wait for all components to register.
	Delay(2500);
                
	// Assign IP Address either from the parameter or from the input serial string.
	myIPAddress = IP_Address;

	IF (LEN(IPAddress) > 0)
		myIPAddress = IPAddress;
    
	tesira.Configure(Control_Type, Command_Processor_ID, myIPAddress, Username, Password);

	IF (Connect)
		tesira.Connect(); 
}


