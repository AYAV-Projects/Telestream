/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name: Biamp Tesira Dialer Conrtrol v3.0
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT MAX_COMMAND_SIZE 150
#DEFINE_CONSTANT MAX_SPEEDDIAL_ENTRIES 16
#CATEGORY "0" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with Biamp Tesira Dialer Control v3.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "BiampTesiraLib3"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_;                                                     
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_; 

// Module Control / Status  
DIGITAL_INPUT Poll_Dialer;   
DIGITAL_OUTPUT Is_Initialized;

// Call Control
DIGITAL_INPUT On_Hook, Off_Hook, Toggle_Hook, Answer, Flash, Redial, End;
DIGITAL_INPUT Get_CallerID_Basic, Get_CallerID_Full;
DIGITAL_INPUT Keypad_0, Keypad_1, Keypad_2, Keypad_3, Keypad_4, Keypad_5, Keypad_6, Keypad_7, Keypad_8, Keypad_9, Keypad_Star, Keypad_Pound, Keypad_Comma, Keypad_Clear, Keypad_BackSpace, Keypad_Dial, Keypad_DialEnteredText;
DIGITAL_OUTPUT Is_On_Hook, Is_Off_Hook, Is_Dialing, Has_Incoming_Call;
STRING_INPUT Keypad_EnteredText$[100];
STRING_OUTPUT CallerID_Num$, CallerID_Name$;
STRING_OUTPUT Keypad$, Last_Number_Dialed$;

// Auto - Answer
DIGITAL_INPUT AutoAnswer_On, AutoAnswer_Off, AutoAnswer_Toggle;                
DIGITAL_OUTPUT AutoAnswer_Is_On, AutoAnswer_Is_Off;

// Directory Control
DIGITAL_INPUT Select_Directory_Item_01, Select_Directory_Item_02, Select_Directory_Item_03, Select_Directory_Item_04; 
DIGITAL_INPUT Select_Directory_Item_05, Select_Directory_Item_06, Select_Directory_Item_07, Select_Directory_Item_08; 
DIGITAL_INPUT Select_Directory_Item_09, Select_Directory_Item_10, Select_Directory_Item_11, Select_Directory_Item_12; 
DIGITAL_INPUT Select_Directory_Item_13, Select_Directory_Item_14, Select_Directory_Item_15, Select_Directory_Item_16; 
DIGITAL_INPUT Dial_Selected_Directory_Item; 
DIGITAL_INPUT Save_Directory_Entry;                              

STRING_OUTPUT Directory_Name_01$, Directory_Name_02$, Directory_Name_03$, Directory_Name_04$;
STRING_OUTPUT Directory_Name_05$, Directory_Name_06$, Directory_Name_07$, Directory_Name_08$;
STRING_OUTPUT Directory_Name_09$, Directory_Name_10$, Directory_Name_11$, Directory_Name_12$;
STRING_OUTPUT Directory_Name_13$, Directory_Name_14$, Directory_Name_15$, Directory_Name_16$;
STRING_OUTPUT Directory_Number_01$, Directory_Number_02$, Directory_Number_03$, Directory_Number_04$;
STRING_OUTPUT Directory_Number_05$, Directory_Number_06$, Directory_Number_07$, Directory_Number_08$;
STRING_OUTPUT Directory_Number_09$, Directory_Number_10$, Directory_Number_11$, Directory_Number_12$;
STRING_OUTPUT Directory_Number_13$, Directory_Number_14$, Directory_Number_15$, Directory_Number_16$;

ANALOG_INPUT Select_Directory_Save_Location;
ANALOG_OUTPUT Selected_Directory_Item;

STRING_OUTPUT Selected_Directory_Item_Name$, Selected_Directory_Item_Num$;
STRING_INPUT Directory_Save_Name$[50], Directory_Save_Num$[50];

DIGITAL_INPUT Enable;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER Dialer_Instance_Tag[50], Control_Status_Instance_Tag[50];
INTEGER_PARAMETER Command_Processor_ID;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Dialer_Instance_Tag, Control_Status_Instance_Tag
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d, 32d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
DialerComponent component;
DialerStatus status;
INTEGER IsReady;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/       
////////////////////////////////////////////////////////////
// SIMPLSHARP Callback Methods
///////////////////////////////////////////////////////////
EVENTHANDLER OnInitializeChange(DialerComponent sender, UInt16EventArgs args)
{
	Is_Initialized = args.Payload;
}
             
EVENTHANDLER OnStateChange(DialerComponent sender, DialerStatusEventArgs args)
{
	status = args.Payload;

	Is_On_Hook = status.IsOffHook() = FALSE;
	Is_Off_Hook = status.IsOffHook() = TRUE;

	Is_Dialing = status.IsDialing() = TRUE;

	Has_Incoming_Call = status.IsRinging() = TRUE;

	Last_Number_Dialed$ = status.LastNumber;

	AutoAnswer_Is_On = status.IsAutoAnswerOn() = TRUE;
	AutoAnswer_Is_Off = status.IsAutoAnswerOn() = FALSE;
}

EVENTHANDLER OnKeypadTextChange(DialerComponent sender, StringEventArgs args)
{
	Keypad$ = args.Payload;
}

EVENTHANDLER OnCallerIDResponse(DialerComponent sender, CallerIDEventArgs args)
{
	CallerID_Num$ = args.Payload.Number;
	CallerID_Name$ = args.Payload.Name;
}

EVENTHANDLER OnSpeedDialSeletion(DialerComponent sender, SpeedDialItemEventArgs args)
{
	SpeedDialItem Item;

	Item = args.Payload;

	Selected_Directory_Item = Item.ID;
	Selected_Directory_Item_Name$ = Item.Label;
	Selected_Directory_Item_Num$ = Item.Number;
}                                                           

EVENTHANDLER OnSpeedDialItemChange(DialerComponent sender, SpeedDialItemEventArgs args)
{
	SpeedDialItem Item;

	Item = args.Payload;

	IF (Item.ID = 1)
	{
		Directory_Name_01$ = Item.Label;
		Directory_Number_01$ = Item.Number;
	}

	IF (Item.ID = 2)
	{
		Directory_Name_02$ = Item.Label;
		Directory_Number_02$ = Item.Number;
	}

	IF (Item.ID = 3)
	{
		Directory_Name_03$ = Item.Label;
		Directory_Number_03$ = Item.Number;
	}

	IF (Item.ID = 4)
	{
		Directory_Name_04$ = Item.Label;
		Directory_Number_04$ = Item.Number;
	}

	IF (Item.ID = 5)
	{
		Directory_Name_05$ = Item.Label;
		Directory_Number_05$ = Item.Number;
	}

	IF (Item.ID = 6)
	{
		Directory_Name_06$ = Item.Label;
		Directory_Number_06$ = Item.Number;
	}

	IF (Item.ID = 7)
	{
		Directory_Name_07$ = Item.Label;
		Directory_Number_07$ = Item.Number;
	}

	IF (Item.ID = 8)
	{
		Directory_Name_08$ = Item.Label;
		Directory_Number_08$ = Item.Number;
	}

	IF (Item.ID = 9)
	{
		Directory_Name_09$ = Item.Label;
		Directory_Number_09$ = Item.Number;
	}

	IF (Item.ID = 10)
	{
		Directory_Name_10$ = Item.Label;
		Directory_Number_10$ = Item.Number;
	}

	IF (Item.ID = 11)
	{
		Directory_Name_11$ = Item.Label;
		Directory_Number_11$ = Item.Number;
	}

	IF (Item.ID = 12)
	{
		Directory_Name_12$ = Item.Label;
		Directory_Number_12$ = Item.Number;
	}

	IF (Item.ID = 13)
	{
		Directory_Name_13$ = Item.Label;
		Directory_Number_13$ = Item.Number;
	}

	IF (Item.ID = 14)
	{
		Directory_Name_14$ = Item.Label;
		Directory_Number_14$ = Item.Number;
	}

	IF (Item.ID = 15)
	{
		Directory_Name_15$ = Item.Label;
		Directory_Number_15$ = Item.Number;
	}

	IF (Item.ID = 16)
	{
		Directory_Name_16$ = Item.Label;
		Directory_Number_16$ = Item.Number;
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
////////////////////////////////////////////////////////////              
// Request Poll
////////////////////////////////////////////////////////////
PUSH Poll_Dialer
{
	component.Poll();
}

////////////////////////////////////////////////////////////              
// Hook State Control
////////////////////////////////////////////////////////////
PUSH On_Hook
{
	component.OnHook();
}

PUSH Off_Hook
{
	component.OffHook();
}

PUSH Toggle_Hook
{
	component.ToggleHook();
}
             
////////////////////////////////////////////////////////////              
// Call Control
////////////////////////////////////////////////////////////
PUSH Answer
{
	component.Answer();
}

PUSH Flash
{
	component.Flash();
}

PUSH Redial
{
	component.Redial();
}

PUSH End
{
	component.End();
}
           
////////////////////////////////////////////////////////////              
// AutoAnswer Control
////////////////////////////////////////////////////////////
PUSH AutoAnswer_On
{
	component.AutoAnswer(TRUE);
}

PUSH AutoAnswer_Off
{
	component.AutoAnswer(FALSE);
}

PUSH AutoAnswer_Toggle
{
	component.AutoAnswerToggle();
}
                  
////////////////////////////////////////////////////////////              
// Caller ID Request
////////////////////////////////////////////////////////////
PUSH Get_CallerID_Basic
{
	component.GetBasicCallerID();
}

PUSH Get_CallerID_Full
{
	component.GetFullCallerID();
}
                 
////////////////////////////////////////////////////////////              
// DialPad Control
////////////////////////////////////////////////////////////
PUSH Keypad_0
{
	component.DialDigit("0");
}

PUSH Keypad_1
{
	component.DialDigit("1");
}

PUSH Keypad_2
{
	component.DialDigit("2");
}

PUSH Keypad_3
{
	component.DialDigit("3");
}

PUSH Keypad_4
{
	component.DialDigit("4");
}

PUSH Keypad_5
{
	component.DialDigit("5");
}

PUSH Keypad_6
{
	component.DialDigit("6");
}

PUSH Keypad_7
{
	component.DialDigit("7");
}

PUSH Keypad_8
{
	component.DialDigit("8");
}

PUSH Keypad_9
{
	component.DialDigit("9");
}

PUSH Keypad_Star
{
	component.DialDigit("*");
}

PUSH Keypad_Pound
{
	component.DialDigit("#");
}

PUSH Keypad_Comma
{
	component.DialDigit(",");
}

PUSH Keypad_Clear
{
	component.ClearKeypadText();
}
             
PUSH Keypad_BackSpace
{
	component.BackspaceKeypadText();
}

PUSH Keypad_Dial
{
	component.DialKeypadText();
}

PUSH Keypad_DialEnteredText
{
	component.DialNumber(Keypad_EnteredText$);
}

////////////////////////////////////////////////////////////              
// SpeedDial List Control
////////////////////////////////////////////////////////////
PUSH Select_Directory_Item_01
{	
	component.SelectSpeedDialEntry(1);
}

PUSH Select_Directory_Item_02
{	
	component.SelectSpeedDialEntry(2);
}

PUSH Select_Directory_Item_03
{	
	component.SelectSpeedDialEntry(3);
}

PUSH Select_Directory_Item_04
{	
	component.SelectSpeedDialEntry(4);
}

PUSH Select_Directory_Item_05
{	
	component.SelectSpeedDialEntry(5);
}

PUSH Select_Directory_Item_06
{	
	component.SelectSpeedDialEntry(6);
}

PUSH Select_Directory_Item_07
{	
	component.SelectSpeedDialEntry(7);
}

PUSH Select_Directory_Item_08
{	
	component.SelectSpeedDialEntry(8);
}

PUSH Select_Directory_Item_09
{	
	component.SelectSpeedDialEntry(9);
}

PUSH Select_Directory_Item_10
{	
	component.SelectSpeedDialEntry(10);
}

PUSH Select_Directory_Item_11
{	
	component.SelectSpeedDialEntry(11);
}

PUSH Select_Directory_Item_12
{	
	component.SelectSpeedDialEntry(12);
}

PUSH Select_Directory_Item_13
{	
	component.SelectSpeedDialEntry(13);
}

PUSH Select_Directory_Item_14
{	
	component.SelectSpeedDialEntry(14);
}

PUSH Select_Directory_Item_15
{	
	component.SelectSpeedDialEntry(15);
}

PUSH Select_Directory_Item_16
{	
	component.SelectSpeedDialEntry(16);	
}

PUSH Dial_Selected_Directory_Item
{
	component.DialSpeedDialEntry();
}

////////////////////////////////////////////////////////////              
// SpeedDial Entry Control
////////////////////////////////////////////////////////////
PUSH Save_Directory_Entry
{
	component.SaveSpeedDialEntry(Select_Directory_Save_Location, Directory_Save_Name$, Directory_Save_Num$);
}

////////////////////////////////////////////////////////////              
// Enable
////////////////////////////////////////////////////////////
THREADSAFE PUSH Enable
{
	IF (IsReady)
		component.Configure(Command_Processor_ID, Dialer_Instance_Tag, Control_Status_Instance_Tag);
}
THREADSAFE RELEASE Enable
{
	IF (IsReady)
		component.UnRegister();
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	IsReady = FALSE;

    WaitForInitializationComplete();
	REGISTEREVENT(component, OnInitializeChange, OnInitializeChange); 
	REGISTEREVENT(component, OnStateChange, OnStateChange); 
	REGISTEREVENT(component, OnKeypadTextChange, OnKeypadTextChange); 
	REGISTEREVENT(component, OnCallerIDResponse, OnCallerIDResponse); 
	REGISTEREVENT(component, OnSpeedDialItemChange, OnSpeedDialItemChange); 
	REGISTEREVENT(component, OnSpeedDialSeletion, OnSpeedDialSeletion); 
                  
	IF (Enable)                                     
	    component.Configure(Command_Processor_ID, Dialer_Instance_Tag, Control_Status_Instance_Tag);

	IsReady = TRUE;
}

